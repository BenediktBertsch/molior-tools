# molior-deploy plugin
# vim: syntax=sh

preinit_deployment_info()
{
  REQUIRED_HOST_COMMANDS="dot zip debsecan"
  REQUIRED_PACKAGES="graphviz zip debsecan"
}

init_deployment_info()
{
  init_deployment_dir
  do_compress=0
}

postinst_internal_deployment_info()
{
  log "gathering info"
  mkdir $WORK_DIR/info

  packages_file=${PROJECT}_${REVISION}_packages.txt
  manual_packages_file=packages-manual.txt
  debsecan_complete_file=debsecan-complete_`date +%d%m%Y-%H%M%S`.txt
  debsecan_file=debsecan_`date +%d%m%Y-%H%M%S`.txt
  debsums_file=debsums-modified.txt
  debtree_file=debtree.dot
  debtree_complete_file=debtree-complete.dot
  debtree_svg=debtree.svg
  debtree_png=debtree.png
  du_file=disk_usage.txt

  echo "$PROJECT/$VERSION/$REVISION/$VARIANT" > $WORK_DIR/info/deployment

  kernel_config_file=""
  if [ -L $target/vmlinuz ]; then
    KERNEL_CONFIG=`readlink $target/vmlinuz | sed s/vmlinuz/config/`
    if [ -f $target/$KERNEL_CONFIG ]; then
      kernel_config_file=`basename $KERNEL_CONFIG`
    fi
  fi
  test -z "$kernel_config_file" || cp $target/boot/$kernel_config_file $WORK_DIR/info/

  chroot $target dpkg -l > $WORK_DIR/info/$packages_file
  exit_on_error "Error running dpkg -l"

  chroot $target apt-mark showmanual > $WORK_DIR/info/$manual_packages_file
  exit_on_error "Error running apt-mark showmanual"

  test -f $target/etc/os-release && cp $target/etc/os-release $WORK_DIR/info/os-release
  cp $target/etc/apt/sources.list $WORK_DIR/info/apt-sources.list

  cp $target/var/lib/dpkg/status $WORK_DIR/info/dpkg.status

  test -f $target/etc/fstab && cp $target/etc/fstab $WORK_DIR/info/

  du -hs `find $target -maxdepth 1 -type d -printf '%P\n' | sed -e "/^proc/d" -e "/^sys/d" -e "/^dev/d"` > $WORK_DIR/info/$du_file

  export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
  debsecan --status $target/var/lib/dpkg/status > $WORK_DIR/info/$debsecan_complete_file
  exit_on_error "Error running debsecan"

  if [ "$SUITE" != "stretch" ]; then
      debsecan --status $target/var/lib/dpkg/status --only-fixed --suite $SUITE > $WORK_DIR/info/$debsecan_file
      exit_on_error "Error running debsecan"
  else
      log "Debsecan is skipped for $SUITE."
  fi

  # check if package deployment was minimized, reinstall to get /usr/share/doc
  if [ -f $target/etc/dpkg/dpkg.cfg.d/excludes ]; then
    log "reinstalling packages"
    rm -f $target/etc/dpkg/dpkg.cfg.d/excludes
    chroot $target apt-get update >&2
    chroot $target sh -c 'DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends --reinstall --yes $(dpkg --get-selections | grep -v deinstall | cut -f1)' >&2
    exit_on_error "Error reinstalling packages"
  fi

  cd $target/usr/share/doc
  find -maxdepth 2 -name copyright | cpio -p --make-directories $WORK_DIR/info/copyrights
  # copy linked packages
  find -maxdepth 1 -type l | cpio -p $WORK_DIR/info/copyrights
  find -maxdepth 2 -name changelog* | cpio -Lp --make-directories $WORK_DIR/info/changelogs
  cd - >/dev/null


  # make sure required essential packages are installed
  DEBIAN_FRONTEND=noninteractive chroot $target apt-get install -y bash init-system-helpers findutils ucf >&2
  DEBIAN_FRONTEND=noninteractive chroot $target apt-get install -y util-linux >&2

  if ! grep -qw debsums $WORK_DIR/info/$packages_file; then
    DEBIAN_FRONTEND=noninteractive chroot $target apt-get -y install debsums >&2
    exit_on_error "Error installing: debsums"
  fi
  chroot $target debsums -ac > $WORK_DIR/info/$debsums_file
  # debsums will return error, no checking
  if ! grep -qw debsums $WORK_DIR/info/$packages_file; then
    DEBIAN_FRONTEND=noninteractive chroot $target apt-get -y purge debsums >&2
    exit_on_error "Error removing: debsums"
  fi

  if [ -n "$INSTALL_PACKAGE" ]; then
      chroot $target apt-get -y install debtree >&2
      exit_on_error "Error installing: debtree"

      chroot $target debtree -I -R -r --no-recommends --no-skip --show-all --no-versions $INSTALL_PACKAGE > $WORK_DIR/info/$debtree_complete_file
      exit_on_error "Error running debtree"

      chroot $target debtree -I -R -r --no-recommends --no-versions $INSTALL_PACKAGE > $WORK_DIR/info/$debtree_file
      exit_on_error "Error running debtree"

      dot -Tsvg $WORK_DIR/info/$debtree_file > $WORK_DIR/info/$debtree_svg
      exit_on_error "Error running dot"

      dot -Tpng $WORK_DIR/info/$debtree_file > $WORK_DIR/info/$debtree_png
      exit_on_error "Error running dot"
  fi
}

finalize_deployment_info()
{
  deployment=$(get_deployment_filename "zip")
  log "creating $deployment"
  umount_bootstrap
  umount_fs
  cd $WORK_DIR/info
  zip -r ../$deployment * 1>&2
  cd - >/dev/null
}
