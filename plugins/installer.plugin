# molior-deploy plugin
# vim: syntax=sh

INITRDINST=/usr/lib/molior-deploy/initrd-installer

preinit_deployment_installer()
{
  REQUIRED_HOST_PACKAGES="isolinux syslinux-utils genisoimage"
}

init_deployment_installer()
{
  do_fstab=0
  init_deployment_dir
}

preinst_deployment_installer()
{
  APT_INSTALL_EXTRA="$APT_INSTALL_EXTRA cpio"
  cp -ar $target $WORK_DIR/instroot
}

finalize_deployment_installer()
{
  umount_bootstrap

  mkdir -p $WORK_DIR/iso
  echo " * creating installer initrd"

  KERNEL_ARCH="$ARCH"

  if [ "$ARCH" = "i386" ]; then
    # The kernel architecture of i386 (32 bit) kernels is called 686
    KERNEL_ARCH="686"
  fi
  if [ "$fs_has_lvm" -eq 1 ]; then
    INSTALLER_EXTRA_PACKAGES="$INSTALLER_EXTRA_PACKAGES lvm2"
  fi
  if [ "$fs_has_luks" -eq 1 ]; then
    INSTALLER_EXTRA_PACKAGES="$INSTALLER_EXTRA_PACKAGES cryptsetup"
  fi
  chroot $WORK_DIR/instroot apt-get install --no-install-recommends --yes $INSTALLER_EXTRA_PACKAGES linux-image-$KERNEL_ARCH busybox initramfs-tools isolinux syslinux-common xz-utils pv util-linux >&2
  chroot $WORK_DIR/instroot apt-get clean >&2
  initrd=$WORK_DIR/instroot/etc/initramfs-tools
  rm -rf $initrd
  cp -ar $INITRDINST $initrd
  if [ -d "$SOURCE_DIR/$INSTALLER_EXTRA_INITRD" ]; then
    cp -ar $SOURCE_DIR/$INSTALLER_EXTRA_INITRD/* $initrd
  fi

  get_deploy_config >> $initrd/scripts/install.conf

  cp /usr/lib/molior-deploy/molior-deploy.sh.inc $initrd/scripts/

  if [ "$fs_has_luks" -eq 1 ]; then
    echo "copy_exec /sbin/cryptsetup /sbin" >> $initrd/hooks/installer
    echo dm_crypt >> $initrd/modules
  fi

  initrd=`readlink $WORK_DIR/instroot/initrd.img | xargs basename`
  chroot $WORK_DIR/instroot update-initramfs -u >/dev/null
  if [ $? -ne 0 ]; then
    log_error "Error updating installer initrd"
  fi
  cp $WORK_DIR/instroot/boot/$initrd $WORK_DIR/iso/initrd.img
  cp -L $WORK_DIR/instroot/vmlinuz $WORK_DIR/iso/

  cp $WORK_DIR/instroot/usr/lib/ISOLINUX/isolinux.bin $WORK_DIR/iso/
  cp $WORK_DIR/instroot/usr/lib/syslinux/modules/bios/menu.c32 $WORK_DIR/iso/
  cp $WORK_DIR/instroot/usr/lib/syslinux/modules/bios/ldlinux.c32 $WORK_DIR/iso/
  cp $INITRDINST/syslinux.cfg $WORK_DIR/iso/
  cat >$WORK_DIR/iso/README.md <<EOF
=Molior Installer for ${PROJECT}_${REVISION} `date -R`=

==APT sources==
$APT_SOURCES

==Installed Packages (`echo \"$INSTALLED_PACKAGES\" | wc -l`)==
$INSTALLED_PACKAGES
EOF

  echo " * creating image.cpio.xz"
  chroot $target sh -c "find / -xdev -depth -print | cpio --quiet -o -H newc -B" > $WORK_DIR/iso/image.cpio
  $PXZ_CMD -T `nproc --ignore 1` -6 $WORK_DIR/iso/image.cpio 2>&1
  if [ $? -ne 0 ]; then
    log_error "Error compressing $WORK_DIR/iso/image.cpio"
  fi

  deployment=${PROJECT}_${VERSION}_${REVISION}_$VARIANT.iso
  echo " * creating $deployment"
  VOLID=`printf "%.32si" "MLR:${PROJECT}"`
  genisoimage -quiet -o $deployment -b isolinux.bin -c boot.cat -l -V $VOLID -A "${PROJECT}_${REVISION}" -input-charset utf8 -allow-multidot -no-emul-boot -boot-load-size 4 -boot-info-table $WORK_DIR/iso/
  if [ $? -ne 0 ]; then
    log_error "Error running genisoimage"
  fi
  isohybrid $deployment
  if [ -n "$SUDO_UID" -a -n "$SUDO_GID" ]; then
    chown $SUDO_UID:$SUDO_GID $deployment
  fi
}

